#LyX 1.6.2 created this file. For more info see http://www.lyx.org/
\lyxformat 345
\begin_document
\begin_header
\textclass article
\begin_preamble


\usepackage{fullpage}

\ifx\pdfoutput\undefined
    % we are running LaTeX, not pdflatex
    
\else
    % we are running pdflatex, so convert .eps files to .pdf
    
    \usepackage{epstopdf}
\fi

\author{Yizhi Cai \& Chris Lasher}
\title{GBCB 5874 Final Paper: Jelesko Pathway Evolution Database}
\date{May 6, 2009}

\usepackage{fancyhdr}
\setlength{\headheight}{15pt}

\lhead{GBCB 5874 Final Paper}
\rhead{Cai \& Lasher}
\end_preamble
\use_default_options false
\language english
\inputencoding auto
\font_roman default
\font_sans default
\font_typewriter default
\font_default_family default
\font_sc false
\font_osf false
\font_sf_scale 100
\font_tt_scale 100

\graphics default
\paperfontsize 11
\spacing single
\use_hyperref true
\pdf_bookmarks true
\pdf_bookmarksnumbered false
\pdf_bookmarksopen false
\pdf_bookmarksopenlevel 1
\pdf_breaklinks false
\pdf_pdfborder true
\pdf_colorlinks false
\pdf_backref false
\pdf_pdfusetitle true
\papersize letterpaper
\use_geometry false
\use_amsmath 0
\use_esint 0
\cite_engine natbib_authoryear
\use_bibtopic false
\paperorientation portrait
\secnumdepth 3
\tocdepth 3
\paragraph_separation indent
\defskip medskip
\quotes_language english
\papercolumns 1
\papersides 2
\paperpagestyle fancy
\tracking_changes false
\output_changes false
\author "" 
\author "" 
\end_header

\begin_body

\begin_layout Title
GBCB 5874 Final Paper: Jelesko Pathway Evolution Database
\end_layout

\begin_layout Author
Yizhi Cai, Chris Larsher
\begin_inset Newline newline
\end_inset

Supervised by Dr.
 John Jelesko
\end_layout

\begin_layout Date
2009-05-09
\end_layout

\begin_layout Section
Introduction
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/Nicotine_pathway.tiff
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Nicotine pathway
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/Tree_of_life.tiff
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
Tree of life
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Methods
\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:The-workflow-of"

\end_inset

 shows the overall workflow of this project.
 The whole project is database driven and composed of three major components.
 The first component is Data acquisition, which needs to fetch sequence
 data from NCBI and JGI using python scripts, and integrate those data into
 a local MySQL database.
 The second major component is user interfaces developed using Django framework,
 which takes a protein sequence in FASTA format and user-specified parameters
 to run homology search.
 Users can select hits of interests to download, and this will link to the
 third major component of this project: the user-specified output functionality.
 This component takes user-selected gi numbers to query taxonomic information
 from the MySQL database and provides users with output files in different
 formats.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

% overall pipeline figure goes here
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/work_flow.tiff
	lyxscale 40
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:The-workflow-of"

\end_inset

The workflow of this project
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Data-Retrieval"

\end_inset

Data Retrieval
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

% Chris
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Data Integration
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

% Chris
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsection
Web Interface
\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Patrick   
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Describe the design rationable
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status open

\begin_layout Plain Layout

% Describe data models
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Web-interface"

\end_inset

 outlines the web interface for running FASTA search.
 There are three sections of this page.
 On the top of the page, there is a sequence input diagram, which takes
 input sequence in FASTA format.
 In the middle of the page, parameters can be specified as necessary for
 running homology searches.
 These parameters include the number of hits to return, the lower and upper
 e-value cutoffs, substitution matrix, and the subject database to search
 against.
 Before sending the input sequence and parameters to run search, it is important
 to check the validity of those inputs.
 The validation includes non-empty input of sequence, non-negative value
 of number of hits, and so on.
 The validation increases the robustness of the entire web application.
 
\end_layout

\begin_layout Standard
Once input sequence and user-specified parameters have been validated, homology
 searches will be run in the backend.
 Outputs of the searches will be interpreted using customized parser and
 Biopython modules (see section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Integration-with-FASTA"

\end_inset

 for implementation detail).
 The parsing result include the gi_number, bit score and e-value of each
 hit.
 And then we use the gi_number to query the MySQL database to pull out additiona
l information, which includes accession, geneus species, annotation and
 download date of each hit.
 Finally, all the information is integrated and render in a nice representation
 (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Homology-search-result"

\end_inset

).
 Users can check certain hits they are interested in to take a closer look.
 We also provide checkall/uncheck all functionality by intergrating a java
 script.
 
\end_layout

\begin_layout Standard
Once a user specifies the hits to download, he/she will be redirected to
 a download Page (see Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Users-selected-files"

\end_inset

).
 The implementation of the output functionality will be discussed in depth
 in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "sub:Output-Generation"

\end_inset

.
 In the download page, there are three files to be downloaded.
 The first file is the output file generated by the homology search, which
 includes detail alignment information of the search.
 The second file is a file containing all selected sequences in FASTA format.
 And finally, the last file is a file that maps internal-used Jelesko-ids
 to gi numbers.
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/web_interface.tiff
	lyxscale 50
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Web-interface"

\end_inset

Web interface
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/Result_selection.tiff
	width 100line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Homology-search-result"

\end_inset

Homology search result
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/User_selection.tiff
	lyxscale 80
	width 80line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Users-selected-files"

\end_inset

Users selected files download
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
The web site is built using Django, which is a Python driven framework for
 rapid web development.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Django-framework"

\end_inset

 shows how Django works.
 The module of data model is used to interact with various of databases,
 in our case, MySQL.
 Django provides a nice administrator interface to add/delete entries in
 the database.
 The URL configuration module is used to interpret input URL requests and
 map them to specific functions in the view module.
 The view module is the core component of the whole framework: it contains
 a list of functions to process data from the data model according to the
 request from the URL module.
 After the data has been processed, it will be render with HTML templates.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement h
wide false
sideways false
status collapsed

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/Django.tiff
	width 60line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Django-framework"

\end_inset

Django framework
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Integration-with-FASTA"

\end_inset

Integration with FASTA and BLAST
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/Data_flow.tiff
	lyxscale 50
	width 70line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Integration-with-FASTA"

\end_inset

Integration with FASTA and BLAST
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Standard
Sequences database similarity search algorithms include two major categories:
 algorithms based on dynamic programming and algorithms based on heuristic
 algorithms.
 Widely used dynamic programming based algorithms include Needleman-Wunsch
 algorithm and Smith-Waterman algorithm.
 BLAST and FASTA are both based on heuristic algorithm.
 Generally speaking, BLAST is faster than FASTA while FASTA outperforms
 BLAST in terms of sensitivity.
 A benchmark comparison of BLAST and FASTA is described in section 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Benchmark-result"

\end_inset

.
\end_layout

\begin_layout Standard
To enjoy the advantages of both, we need to integrate BLAST and FASTA.
 After the data retrieve and integration steps, we got a giant flat text
 file containing 4 million sequence data.
 This text file has been imported as a table in MySQL database, and also
 been converted into BLAST2 database format using formatdb command.
 Both BLAST and FASTA search programs recognize the BLAST2 format.
 For running BLAST search, we leveraged to use the BLAST module of Biopython
 
\begin_inset CommandInset citation
LatexCommand citet
key "Cock:2009p22197"

\end_inset

, and also used the built-in parse to process the output XML files.
 Since there is no available modules for running FASTA and parsing its output,
 we decided to use system call to run FASTA program and save its output
 in the format of text file.
 Then a custom parser has been implemented to process the output text file.
 The parsed output of BLAST and FASTA includes a gi number, e-value and
 bit scores of each hit.
 Then we developed scripts to query the MySQL database using the gi numbers.
 The intergrated information finally is sent to the Django web interface.
 
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

% Patrick 
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

% Compare BLAST and FASTA/Ssearch algorthms  
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

% Describe the Biopython module for BLAST
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

% Describe the customized parser for FASTA and SSearch
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Subsubsection
\begin_inset CommandInset label
LatexCommand label
name "sub:Output-Generation"

\end_inset

Output Generation
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

% Patrick
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Section
Results
\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

% ? Not sure about this yet.
 Would be nice if we could prove a use case.
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
\begin_inset ERT
status collapsed

\begin_layout Plain Layout

% Compare the number of hits in these regions: 0 ~ 10^-20, 10^-20 ~ 10^-2
\end_layout

\begin_layout Plain Layout

\end_layout

\end_inset


\end_layout

\begin_layout Standard
In order to illustrate the application of this project, we used three protein
 sequences (namely A622, NtNUP1 and NtMPO1) to benchmark three homologous
 searches.
 Figure 
\begin_inset CommandInset ref
LatexCommand ref
reference "fig:Benchmark-result"

\end_inset

 presents the benchmark result in terms of computation time and search sensitivi
ty.
 Searches are performed against the complete database, which contains 4
 million sequences.
 The result suggests that both FASTA and Ssearch are more computationally
 expensive than BLAST, but both obtain more hits than BLAST.
 Also, we observe that with the close computational time, Ssearch outperforms
 FASTA, especially in the case of A622.
 
\end_layout

\begin_layout Standard
\begin_inset Float figure
placement H
wide false
sideways false
status open

\begin_layout Plain Layout
\align center
\begin_inset Graphics
	filename figures/Bench_mark_result.tiff
	width 80line%

\end_inset


\end_layout

\begin_layout Plain Layout
\begin_inset Caption

\begin_layout Plain Layout
\begin_inset CommandInset label
LatexCommand label
name "fig:Benchmark-result"

\end_inset

Benchmark result
\end_layout

\end_inset


\end_layout

\end_inset


\end_layout

\begin_layout Section
Summaries and future workflow
\end_layout

\begin_layout Standard
We began this project from scratch, and by the end of the semester we have
 completed the project by accomplishing these tasks:
\end_layout

\begin_layout Enumerate
We have fetched more than 4 million sequences from NCBI, JGI and other sources.
\end_layout

\begin_layout Enumerate
We have developed custom parser for interpreting FASTA outputs, and leveraged
 BioPython for data integration.
 
\end_layout

\begin_layout Enumerate
We have created MySQL, BLAST and FASTA databases for data storage.
 
\end_layout

\begin_layout Enumerate
We have built web interface for running BLAST, FASTA and Ssearch homology
 searches.
 
\end_layout

\begin_layout Enumerate
We also have implemented user-specified output functionality.
 
\end_layout

\begin_layout Standard
We envisage and would like to suggest a few future work for the continuation
 of the project.
 First, additional sequence data should be retrieved from NCBI.
 Second, we need to incorporate sequences from JGI and other sources.
 Last, it will be helpful to save web searches for later reviewing.
 
\end_layout

\begin_layout Section
Author contributions
\end_layout

\begin_layout Standard
Y.C.
 created MySQL and BLAST2 databases for data storage, develped web interface
 for running BLAST, FASTA and SSearch, implemented parsers for parsing homology
 search results, and wrote part of the final paper.
 
\end_layout

\begin_layout Section
Acknowledgements
\end_layout

\begin_layout Standard
YC and CL would like to thank Dr.John Jelesko for overseeing the project
 and giving valuable supervision, Dr's David Bevan and Alexey Onufriev for
 teaching this class, and Alexander James Weisberg for assistance on Linux
 administration.
 
\end_layout

\begin_layout Standard
\begin_inset CommandInset bibtex
LatexCommand bibtex
bibfiles "Bio"
options "IEEEtran"

\end_inset


\end_layout

\end_body
\end_document
